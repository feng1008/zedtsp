Traveling Salesman problem(TSP) is studied extensively in Computer Science and Operation Research. TSP can be better explained using graph theory. Given 'n' nodes, the salesman has to visit every node and come back to the starting node without visiting any node twice. We assume that the graph formed by connecting these 'n' nodes forms a Hamiltonian graph i.e every vertex is connected to every other vertex. For given 'n' nodes there exists (n-1)! feasible solutions. So the problem is to find the best solution out of these feasible solutions. All sub-tours must be eliminated as there can be 1 to n sub-tours. The graph is represented as an adjacency matrix.
       TSP can be solved using various algorithms such as Branch and Bound Algorithms, Heuristics Algorithms, Dynamic programming, greedy method etc. Brute force method can also be applied but the computations become impractical for n=20 and above. I will first implement the brute force approach to solve TSP. Then I will to solve it using Dynamic Programming and compare both the results. Hence, as of now, I will be using arrays and trees as data structures to implement TSP. I may use other data structures as and when the need arises. I will implement the program in c++ as I have some experience in that language. The program will take input 'n' the number of nodes. Time complexity of brute force approach is O(n!) while that of dynamic programming is O(n^2 2^n). The address of the project repository: https://github.com/afaquejam/zedtsp.git 
